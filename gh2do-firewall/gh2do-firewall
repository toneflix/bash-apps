#!/usr/bin/env bash

set -e

# üîß Config
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CACHE_FILE="$SCRIPT_DIR/.do_firewall_cache"
MAX_SOURCES=1000
PROTOCOL="tcp"
PORTS="22"

############################################################
# Help                                                     #
############################################################
Help() {
    # Display Help
    echo "A smart CLI tool to automatically sync GitHub Actions IP ranges to your DigitalOcean firewall rules."
    echo "Usage: gh2do-firewall"
    echo
    echo "options:"
    echo "-h, --help                        Display this help."
    echo "-x, --uninstall                   Uninstall gh2do-firewall."
    exit 1
}

############################################################
# Uninstall                                                #
############################################################
Uninstall() {
    # Add uninstall support
    echo "‚ö†Ô∏è  This will remove gh2do-firewall from your system. Continue? (y/N): "
    read -r CONFIRM
    if [[ "$CONFIRM" =~ ^[Yy]$ ]]; then
        sudo rm -- "$0"
        sudo rm "${CACHE_FILE}"
        echo "‚úÖ gh2do-firewall has been uninstalled."
    else
        echo "‚ùé Uninstall cancelled."
    fi
    exit 1
}

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    Help
elif [[ "$1" == "--uninstall" || "$1" == "-x" ]]; then
    Uninstall
fi

# üßæ Load last cache
FIREWALL_ID=""
FIREWALL_NAME=""
EXTEND_CUSTOM_ACCESS="false"
DROPLET_IDS=""
CUSTOM_SOURCES=""
[[ -f "$CACHE_FILE" ]] && source "$CACHE_FILE"

# üìã List firewalls
echo "üìã Available Firewalls:"
FIREWALLS_JSON=$(doctl compute firewall list -o json)

FIREWALL_IDS=()
FIREWALL_NAMES=()
i=0
while IFS= read -r id && IFS= read -r name <&3; do
    FIREWALL_IDS[i]="$id"
    FIREWALL_NAMES[i]="$name"
    ((i++))
done < <(echo "$FIREWALLS_JSON" | jq -r '.[].id') 3< <(echo "$FIREWALLS_JSON" | jq -r '.[].name')

DISPLAY_INDEX=1
for i in "${!FIREWALL_IDS[@]}"; do
    echo "$DISPLAY_INDEX. ${FIREWALL_NAMES[$i]} (${FIREWALL_IDS[$i]})"
    ((DISPLAY_INDEX++))
done

NEW_OPTION_INDEX=$DISPLAY_INDEX
echo "$NEW_OPTION_INDEX. ‚ûï Create new firewall"

DEFAULT="${FIREWALL_NAME} (${FIREWALL_ID})"
read -p "Select firewall by number (or press Enter to use cached: $DEFAULT): " FIREWALL_INDEX

if [[ -n "$FIREWALL_INDEX" ]]; then
    if [[ "$FIREWALL_INDEX" == "$NEW_OPTION_INDEX" ]]; then
        # üîß Create new firewall
        read -p "üîß Enter name for new firewall: " FIREWALL_NAME
        [[ -z "$FIREWALL_NAME" ]] && {
            echo "‚ùå Name is required."
            exit 1
        }

        # List droplets
        echo "üíß Available Droplets:"
        DROPLETS_JSON=$(doctl compute droplet list -o json)
        DROPLET_IDS_LIST=()
        # DROPLET_NAMES_LIST=()
        j=0
        while IFS= read -r id && IFS= read -r name <&3; do
            DROPLET_IDS_LIST[j]="$id"
            # DROPLET_NAMES_LIST[j]="$name"
            echo "$((j + 1)). $name ($id)"
            ((j++))
        done < <(echo "$DROPLETS_JSON" | jq -r '.[].id') 3< <(echo "$DROPLETS_JSON" | jq -r '.[].name')

        read -p "Select droplets by number (comma-separated, or leave blank to use cached): " SELECTED
        if [[ -n "$SELECTED" ]]; then
            DROPLET_IDS=""
            IFS=',' read -ra indices <<<"$SELECTED"
            for index in "${indices[@]}"; do
                idx=$((index - 1))
                DROPLET_IDS+="${DROPLET_IDS_LIST[$idx]},"
            done
            DROPLET_IDS="${DROPLET_IDS%,}" # Trim last comma
        fi

        [[ -z "$DROPLET_IDS" ]] && {
            echo "‚ùå No droplets selected."
            exit 1
        }
    else
        idx=$((FIREWALL_INDEX - 1))
        FIREWALL_ID="${FIREWALL_IDS[$idx]}"
        FIREWALL_NAME="${FIREWALL_NAMES[$idx]}"
    fi
elif [[ -z "$FIREWALL_ID" || -z "$FIREWALL_NAME" ]]; then
    echo "‚ùå No cached firewall to use."
    exit 1
fi

CUSTOM_ARRAY=()

IFS=',' read -ra TEMP <<<"$CUSTOM_SOURCES"
for ip in "${TEMP[@]}"; do
    [[ -n "$ip" ]] && CUSTOM_ARRAY+=("$ip")
done

# ‚ûï Custom sources
if [[ -n "$CUSTOM_SOURCES" ]]; then
    echo "üíæ Previously saved custom sources: $CUSTOM_SOURCES"
    read -p "Use saved custom sources? (Y/n): " USE_SAVED
    if [[ "$USE_SAVED" =~ ^[Nn]$ ]]; then
        CUSTOM_SOURCES=""
    fi
fi

read -p "Add additional custom IPs (comma-separated)? (leave blank to skip): " CUSTOM_INPUT
if [[ -n "$CUSTOM_INPUT" ]]; then
    CUSTOM_SOURCES="$CUSTOM_INPUT"
fi

# Request Custom Access
if [[ "$CUSTOM_SOURCES" ]]; then
    read -p "Grant HTTP/S and MySQL access to custom sources (y/N): " REQ_CUSTOM_ACCESS
    if [[ "$REQ_CUSTOM_ACCESS" =~ ^[Yy]$ ]]; then
        EXTEND_CUSTOM_ACCESS="true"
    fi
elif [[ "$USE_SAVED" =~ ^[Nn]$ ]]; then
    CUSTOM_SOURCES=""
    CUSTOM_ARRAY=()
    EXTEND_CUSTOM_ACCESS="false"
fi

# Request HTTP/S and MySQL
if [[ "$EXTEND_CUSTOM_ACCESS" != "true" ]]; then
    read -p "Allow all Http and Https access? (y/N): " ACCESS_WEB
    read -p "Allow all MySQL access? (y/N): " ACCESS_SQL
fi

# üåê GitHub IPs
read -p "Include GitHub IPv6 addresses? (y/N): " INCLUDE_IPV6
echo "üåê Fetching GitHub Actions IP ranges..."
GITHUB_META=$(curl -s https://api.github.com/meta)

GITHUB_IPV4=($(echo "$GITHUB_META" | jq -r '.actions[]' | grep -E '^[0-9]+\..*'))
GITHUB_IPV6=()
[[ "$INCLUDE_IPV6" =~ ^[Yy]$ ]] && GITHUB_IPV6=($(echo "$GITHUB_META" | jq -r '.actions[]' | grep -v -E '^[0-9]+\..*'))

# üîí Confirmation
echo ""
echo "üõ°Ô∏è  Ready to apply rules:"
echo "‚Ä¢ Firewall: $FIREWALL_NAME"
echo "‚Ä¢ Firewall ID: $FIREWALL_ID"
[[ -n "$DROPLET_IDS" ]] && echo "‚Ä¢ Droplets: $DROPLET_IDS"
echo "‚Ä¢ GitHub IPs: $((${#GITHUB_IPV4[@]} + ${#GITHUB_IPV6[@]}))"
echo "‚Ä¢ Custom IPs: ${#CUSTOM_ARRAY[@]}"
read -p "Proceed? (Y/n): " CONFIRM
[[ "$CONFIRM" =~ ^[Nn]$ ]] && {
    echo "‚ùå Aborted."
    exit 0
}

# üßπ Remove previous TCP:22 rules (GitHub and Custom)
echo "‚ôªÔ∏è  Checking and removing matching ssh rules (port 22)..."

REMOVE_RULES_ARGS=()

if [[ "$(echo "$FIREWALLS_JSON" | jq 'length')" -gt 0 ]]; then
    for row in $(echo "$FIREWALLS_JSON" | jq -c '.[0].inbound_rules[] | select(.protocol == "tcp" and .ports == "22")'); do
        ADDRESSES=$(echo "$row" | jq -r '.sources.addresses[]' | paste -sd "," -)
        FORMATTED=$(printf "address:%s" "${ADDRESSES//,/,address:}")
        REMOVE_RULES_ARGS+=("--inbound-rules" "protocol:tcp,ports:22,${FORMATTED}")
    done
fi

if [[ ${#REMOVE_RULES_ARGS[@]} -gt 0 ]]; then
    echo "‚ûñ Removing ${#REMOVE_RULES_ARGS[@]} ssh rules..."
    OUTPUT=$(doctl compute firewall remove-rules "$FIREWALL_ID" "${REMOVE_RULES_ARGS[@]}" 2>&1) || {
        MESSAGE=$(echo "$OUTPUT" | jq -r '.errors[0].detail // "Unknown error"' 2>/dev/null || echo "$OUTPUT")
        echo "‚ùå Failed to remove previous rules: $MESSAGE"
        exit 1
    }
    echo "‚úÖ Old rules removed."
else
    echo "‚ÑπÔ∏è  No matching rules found to remove."
fi

# üß± If creating a new firewall
if [[ "$FIREWALL_INDEX" == "$NEW_OPTION_INDEX" ]]; then
    echo "üöß Creating new firewall '$FIREWALL_NAME'..."

    CHUNK=("${GITHUB_IPV4[@]}" "${GITHUB_IPV6[@]}")
    CHUNK=("${CHUNK[@]:0:$MAX_SOURCES}")
    ADDR=$(printf ",address:%s" "${CHUNK[@]}")
    ADDR="${ADDR:1}"
    OUTPUT=$(doctl compute firewall create \
        --name "$FIREWALL_NAME" \
        --inbound-rules "protocol:$PROTOCOL,ports:$PORTS,$ADDR" \
        --outbound-rules "protocol:tcp,ports:0,address:0.0.0.0/0" \
        --droplet-ids "$DROPLET_IDS" -o json 2>&1) || {
        echo "‚ùå Failed to create firewall: $OUTPUT"
        exit 1
    }
    FIREWALL_ID=$(echo "$OUTPUT" | jq -r '.[].id')
fi

# ‚ûï Add GitHub IP rules in chunks
ALL_SOURCES=("${GITHUB_IPV4[@]}" "${GITHUB_IPV6[@]}")
UNIQUE_SOURCES=($(printf "%s\n" "${ALL_SOURCES[@]}" | sort -u))

############################################################
# WebAndSqlRules                                           #
############################################################
WebAndSqlRules() {
    if [[ "$ACCESS_WEB" =~ ^[Yy]$ ]]; then
        # ‚ûï Add general rule for HTTP
        echo "‚ûï Adding general rule for HTTP..."
        doctl compute firewall add-rules "$FIREWALL_ID" \
            --inbound-rules "protocol:tcp,ports:80,address:0.0.0.0/0,address:::/0" >/dev/null

        # ‚ûï Add general rule for HTTPS
        echo "‚ûï Adding general rule for HTTPS..."
        doctl compute firewall add-rules "$FIREWALL_ID" \
            --inbound-rules "protocol:tcp,ports:443,address:0.0.0.0/0,address:::/0" >/dev/null
    fi

    if [[ "$ACCESS_SQL" =~ ^[Yy]$ ]]; then
        # ‚ûï Add general rule for MySQL
        echo "‚ûï Adding general rule for MySQL..."
        doctl compute firewall add-rules "$FIREWALL_ID" \
            --inbound-rules "protocol:tcp,ports:3306,address:0.0.0.0/0,address:::/0" >/dev/null
    fi
}

# ‚ûï Add custom rule separately
if [[ ${#CUSTOM_ARRAY[@]} -gt 0 ]]; then
    CUSTOM_ADDR=$(printf ",address:%s" "${CUSTOM_ARRAY[@]}")
    CUSTOM_ADDR="${CUSTOM_ADDR:1}"
    echo "‚ûï Adding custom rule (${#CUSTOM_ARRAY[@]} addresses)..."
    doctl compute firewall add-rules "$FIREWALL_ID" \
        --inbound-rules "protocol:$PROTOCOL,ports:$PORTS,$CUSTOM_ADDR" >/dev/null

    if [[ "$EXTEND_CUSTOM_ACCESS" == "true" ]]; then
        # ‚ûï Add custom rule for HTTP
        echo "‚ûï Adding custom rule for HTTP (${#CUSTOM_ARRAY[@]} addresses)..."
        doctl compute firewall add-rules "$FIREWALL_ID" \
            --inbound-rules "protocol:tcp,ports:80,$CUSTOM_ADDR" >/dev/null

        # ‚ûï Add custom rule for HTTPS
        echo "‚ûï Adding custom rule for HTTPS (${#CUSTOM_ARRAY[@]} addresses)..."
        doctl compute firewall add-rules "$FIREWALL_ID" \
            --inbound-rules "protocol:tcp,ports:443,$CUSTOM_ADDR" >/dev/null

        # ‚ûï Add custom rule for MySQL
        echo "‚ûï Adding custom rule for MySQL (${#CUSTOM_ARRAY[@]} addresses)..."
        doctl compute firewall add-rules "$FIREWALL_ID" \
            --inbound-rules "protocol:tcp,ports:3306,$CUSTOM_ADDR" >/dev/null
    else
        WebAndSqlRules
    fi
else
    WebAndSqlRules
fi

echo "üöÄ Adding GitHub IP rules..."
i=0
count=1
while [ $i -lt ${#UNIQUE_SOURCES[@]} ]; do
    CHUNK=("${UNIQUE_SOURCES[@]:$i:$MAX_SOURCES}")
    ADDR=$(printf ",address:%s" "${CHUNK[@]}")
    ADDR="${ADDR:1}"
    echo "‚ûï GitHub rule $count (${#CHUNK[@]} addresses)..."
    doctl compute firewall add-rules "$FIREWALL_ID" \
        --inbound-rules "protocol:$PROTOCOL,ports:$PORTS,$ADDR" >/dev/null
    ((i += MAX_SOURCES))
    ((count++))
done

# üíæ Save cache
cat >"$CACHE_FILE" <<EOF
FIREWALL_ID="$FIREWALL_ID"
FIREWALL_NAME="$FIREWALL_NAME"
DROPLET_IDS="$DROPLET_IDS"
CUSTOM_SOURCES="$CUSTOM_SOURCES"
EOF

echo "‚úÖ Done. Firewall '$FIREWALL_NAME' is updated and cached."
